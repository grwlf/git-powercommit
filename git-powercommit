#!/bin/sh

GPC_OK=0
GPC_DURTY=1
GPC_ERR=2

# TODO: Filter handlers use stdout to report results, and stderr is redirected
# to a logfile. One need to find the way for them to print messages to the
# terminal.

if test "$GPC_WORKER" != "y" ; then
  export CLR_RED=`tput setaf 1 || echo ""`
  export CLR_GREEN=`tput setaf 2 || echo ""`
  export CLR_BLUE=`tput setaf 4 || echo ""`
  export CLR_PINK=`tput setaf 5 || echo ""`
  export CLR_RESET=`tput sgr0 || echo ""`
fi

# Logs go to stderr, which could be redirected to a file. User messages go to
# stdout which is not normally redirected.
msg() {
  if test "$LOGFILE" != '-' && test "$QUIET_LOGS" = "n" ; then
    echo "$GPC_INDENT$@"
  fi
  echo "$GPC_INDENT$@" >&2
}

clrmsg_() {
  local q="$1" ; shift
  local clr="$1" ; shift
  if test "$LOGFILE" != '-' && test "$q" = "n" ; then
    echo "$GPC_INDENT${clr}$@${CLR_RESET}"
  fi
  echo "$GPC_INDENT$@" >&2
}

clrmsg() { clrmsg_ "$QUIET_LOGS" "$@" ; }
clrrep() { clrmsg_ "$QUIET_REPORTS" "$@" ; }

monmsg() {
  if test "$GPC_WORKER" != "y" ; then
    clrmsg "$CLR_BLUE" "$@"
  fi
}

errexit() {
  clrmsg "$CLR_RED" "$@"
  exit "$GPC_ERR"
}

BNAME=powercommit
needsrecover() {
  { git branch -a; git stash list; } | grep -q "$BNAME"
}
needsrecoverexit() {
  errexit $'\n'"Looks like the previous call to git-powercommit failed." \
          "Consider making some investigation, then remove the branch" \
          "\`$BNAME\` and the stash of the same name. Typical repair" \
          "commands are:" $'\n\n\t' \
          "git reset --hard \"$BNAME\"; git stash pop;" \
          "git branch -D \"$BNAME\"" $'\n'
}
badexit() {
  errexit $'\n'"Something goes wrong." \
          "Consider reviewing the \"$(logname $LOGFILE)\"" \
          "and recover to the initial state by calling the abort mode:" \
          $'\n\n\t' \
          "git powertcommit --abort" $'\n'
}

logname() {
  if test "$1" = "-" ; then echo stdout ; else echo "$1" ; fi
}

which git 2>&1 >/dev/null || \
  errexit "\`git\` is not installed"

ME=`basename $0`
GPC="$(cd -P $(dirname $0) && pwd)/$ME"
DRYRUN=n
DEBUG=y
NODEBUG=n
RECURSIVE=y
QUIET_LOGS=n
QUIET_REPORTS=n
ABORT=n
opts=$(getopt -o ':h' -l \
"no-recursive,dry-run,help,debug,no-debug,log:,"\
"quiet,quiet-logs,quiet-reports,abort" \
-- "$@")
if test "$?" != "0" ; then
  echo "Invalid options passed" >&2
  SHOWHELP=y
else
  opts_bak="$@"
  eval set -- "$opts"
  while test -n "$1"; do
    case "$1" in
      --) ;;
      --log) LOGFILE="$2" ; shift ;;
      --dry-run) DRYRUN=y ;;
      --debug) DEBUG=y ;;
      --no-debug) NODEBUG=y ;;
      --no-recursive) RECURSIVE=n ;;
      --quiet-logs) QUIET_LOGS=y ;;
      --quiet-reports) QUIET_REPORTS=y ;;
      --quiet) QUIET_LOGS=y ; QUIET_REPORTS=y ;;
      --abort) ABORT=y ;;
      -h|--help) SHOWHELP=y ;;
      *) msg "Unknown option $1"; SHOWHELP=y ;;
    esac
    shift
  done
  eval set -- "$opts_bak"
fi

if test "$SHOWHELP" = "y" ; then
  msg "Usage: $ME [--quiet] [--no-recursive] [--log=-|FILE]"
  msg "       $ME --dry-run [OPTS..]"
  msg "       $ME --abort [OPTS..]"
  exit "$GPC_ERR"
fi

if test -n "$LOGFILE" ; then
  if test "$LOGFILE" != "-" ; then
    exec 2>>"$LOGFILE"
  fi
  monmsg "Logging to $(logname $LOGFILE)"
else
  LOGDIR=`test -d "$TMPDIR" && echo $TMPDIR || echo /tmp`
  LOGFILE="$LOGDIR/git_powercommit_$UID.log"
  exec 2>>"$LOGFILE"
  monmsg "Logging to $(logname $LOGFILE)"
fi

echo "Opts: $@" >&2

if test -z "$GPC_INDENT" ; then
  GPC_INDENT=""
fi

setmode() {
  if test "$NODEBUG" = "y" ; then
    set -e +x
  else
    test "$DEBUG" = "y" && set -e -x || set -e
  fi
}

run() {
  if test "$DRYRUN" = "y" ; then
    msg "${GPC_INDENT}dry-run: $@"
  else
    "$@" 1>&2
  fi
}

dirname2() {
  # Print the dirname of a file if it is not empty. Otherwize print the file.
  local dn=$(dirname "$1")
  if test "$dn" = "." ; then
    echo "$1"
  else
    echo "$dn"
  fi
}

mapchanges() {(
  # Scan git repo, call `filter` to calculate the paths of interest. After
  # that sort these paths and call `commiter` for every such path.
  setmode
  local filter="$1"
  local commiter="$2"
  export FAILPATH=$(mktemp -t git_pcmt_mapfailed_$$_XXXXX.txt)
  git status --no-renames --porcelain=v2 | \
  while read N XY sub mH mI mW hH hI path ; do
    echo "porcelain: $N $XY $sub $mH $mI $mW $hH $hI $path" >&2
    $filter $N $XY $sub $mH $mI $mW $hH $hI "$path"
  done | \
  sort -u --reverse | \
  while read path; do
    $commiter "$path" || echo "$path" >> "$FAILPATH"
  done
  if test -s "$FAILPATH" ; then
    rm "$FAILPATH";
    exit "$GPC_ERR"
  fi
  rm "$FAILPATH";
)}

filter_normal() {
  # Inputs are according to `git status --porcelain=v2` spec. The function
  # filters normal changes, i.e. not renames and submodules
  local N="$1"
  case "$N" in
    1)
      local XY="$2"
      local subm="$3"
      shift 8; local path="$1"
      case "$XY" in
        # Modified
        .M|M.|MM)
          case "$subm" in
            # Not a submodule
            N...) dirname2 "$path" ;;
            *) ;;
          esac ;;
        *) ;;
      esac ;;
    *) ;;
  esac
}

commit_normal() {
  # Commit changes assuming that the path points to normal file/folder
  local path="$1"
  msg "Committing \"$path\""
  echo $(git rev-parse --show-toplevel)/$path >> "$GPC_DESTRUCTIVE"
  run git add -u -- "$path"
  run git commit -m "Update $path"
}

filter_untracked() {
  local N="$1"
  case "$N" in
    \?)
      shift 1; local path="$1"
      echo "$path" ;;
    *) ;;
  esac
}

commit_untracked() {
  local path="$1"
  echo $(git rev-parse --show-toplevel)/$path >> "$GPC_UNTRACKED"
}

filter_subm() {
  # Inputs are according to `git status --porcelain=v2` spec. The function
  # filters submodules which has changed commits.
  local sub="$3"; shift 8; local path="$1"
  case "$sub" in
    SC??) echo "$path" ;;
    *) ;;
  esac
}

commit_subm() {
  # Commit changes assuming that the path points to a submodule
  local path="$1"
  msg "Committing submodule \"$path\""
  echo $(git rev-parse --show-toplevel)/$path >> "$GPC_DESTRUCTIVE"
  run git add -u -- "$path"
  run git commit -m "Bump $path"
}

if test "$GPC_WORKER" != "y"; then
  { echo; echo
    echo "============================================================"
    echo "Starting git-powercommit, dry-run=$DRYRUN, $(LANG=C date)"
    echo "============================================================"
  } >&2
  UNTRACKED=$(mktemp -t git_pcmt_untracked_$$_XXXXX.txt)
  DESTRUCTIVE=$(mktemp -t git_pcmt_destructive_$$_XXXXX.txt)
  trap "rm $UNTRACKED $DESTRUCTIVE; badexit" SIGINT
  trap "rm $UNTRACKED $DESTRUCTIVE" EXIT
  GPC_CWD="`pwd`" \
  GPC_WORKER=y \
  GPC_UNTRACKED=$UNTRACKED \
  GPC_DESTRUCTIVE=$DESTRUCTIVE \
    "$GPC" "$@"
  ret="$?"
  case "$ret" in
    "$GPC_OK")
      # Report the untracked files
      setmode
      n=0
      for path in $(cat "$UNTRACKED"); do
        desc=$(LANG=C file "$path" | awk -F ': ' '{print $2}')
        if echo "$desc" | grep -q -i -E 'source|text|script' ; then
          RP=$(realpath --relative-to="`pwd`" "$path")
          clrrep "$CLR_PINK" "Untracked $RP : $desc"
        fi
        n=$(expr "$n" + 1)
      done
      clrrep "$CLR_RESET" "Total $n untracked files"
      if test "$DRYRUN" = "y" ; then
        # Report the dry-run status
        if test -s "$DESTRUCTIVE"; then
          clrrep "$CLR_GREEN" "Durty"
          exit "$GPC_DURTY"
        else
          clrrep "$CLR_GREEN" "Clean"
          exit "$GPC_OK"
        fi
      else
        # Normal termination
        clrrep "$CLR_GREEN" "Done"
        exit "$GPC_OK"
      fi
      ;;
    *) badexit;;
  esac
else
  # Worker part.
  test -n "$GPC_UNTRACKED"
  test -n "$GPC_DESTRUCTIVE"

  setmode
  RROOT=$(git rev-parse --show-toplevel)
  cd -P "$RROOT"
  RELROOT=$(realpath --relative-to="$GPC_CWD/.." "$RROOT")

  if test "$ABORT" = "y" ; then
    if needsrecover ; then
      clrmsg "$CLR_PINK" "Recovering $RELROOT"
      run git reset --hard "$BNAME" || true
      SN=$(git stash list | grep "$BNAME" | head -n 1 | awk -F : '{print $1}')
      run git stash pop $SN || true
      run git branch -D "$BNAME" || true
    fi
    if test "$RECURSIVE" = "y" ; then
      for s in `git submodule status | awk '{print $2}'` ; do
        clrmsg "$CLR_BLUE" "Visiting submodule \"$s\""
        ( cd -P "$s" && GPC_INDENT="$GPC_INDENT  " $GPC "$@" ; )
      done
    fi
    exit "$GPC_OK"
  else
    needsrecover && needsrecoverexit
  fi

  if test "$RECURSIVE" = "y" ; then
    for s in `git submodule status | awk '{print $2}'` ; do
      ( cd -P "$s" && \
        git status --porcelain | grep -v '^??' | grep -q '^[^\s]*' || exit 0 && \
        git symbolic-ref -q HEAD >/dev/null ; ) || \
        errexit "Submodule \"$s\" is in the detached HEAD state so \"git" \
          "push\" will fail. Please checkout it to the correct branch:" $'\n\n\t' \
          "git branch -f branch HEAD && git checkout master" $'\n\n' \
          "Consider using \`git submodule update --rebase\` or \`... --merge\`" \
          "in future." $'\n'
    done
  fi

  msg "Checking the status of \"$RELROOT\""
  if test "$DRYRUN" = "n" ; then
    set +e
    GPC_WORKER=n "$GPC" "$@" --dry-run --quiet
    ret="$?"
    set -e
    case "$ret" in
      "$GPC_OK")
        clrmsg "$CLR_GREEN" "Nothing to do"
        exit "$GPC_OK" ;;
      "$GPC_DURTY")
        msg "Applying changes" ;;
      *)
        clrmsg "$CLR_RED" "Dry-run failed"
        exit "$ret" ;;
    esac
  fi
  run git branch "$BNAME"
  run git stash push -m "$BNAME"
  msg "Pulling fresh commits from the upstream"
  run git pull --rebase
  run git stash apply || true # Could be empty
  if test "$RECURSIVE" = "y" ; then
    for s in `git submodule status | awk '{print $2}'` ; do
      clrmsg "$CLR_BLUE" "Visiting submodule \"$s\""
      ( cd -P "$s" && GPC_INDENT="$GPC_INDENT  " $GPC "$@" ; )
    done
    mapchanges filter_subm commit_subm
  fi

  clrmsg "$CLR_BLUE" "Commiting local changes"
  mapchanges filter_untracked commit_untracked
  mapchanges filter_normal commit_normal

  msg "Pushing the changes upstream"
  run git push
  run git branch --delete "$BNAME"
  run git stash drop || true # Could be empty
fi

